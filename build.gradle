// gradle이 빌드되기 전 실행되는 설정
buildscript {
    ext {
        springBootVersion = '2.7.5'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.15.RELEASE"
    }
}

// 루트 + 하위 프로젝트 공통 세팅
allprojects {
}

// 하위 프로젝트 공통 세팅
subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    group 'com.msa'
    version '0.0.1-SNAPSHOT'

    sourceCompatibility = '17'

    repositories {
        mavenCentral()
    }

    ext {
        set('springCloudVersion', "2021.0.4")
    }

    dependencies {
        // actuator
        implementation 'org.springframework.boot:spring-boot-starter-actuator'

        // lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // spring boot starter
        implementation 'org.springframework.boot:spring-boot-starter'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    test {
        useJUnitPlatform()
    }
}

// 하위 프로젝트 별 세팅
project(':common') {
    bootJar { enabled = false } // common, core 은 bootJar 로 패키징 할 필요 없음
    jar { enabled = true }

    dependencies {
        // db 접속정보 암호화
        implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.4'
        // 
        implementation 'org.springframework.boot:spring-boot-starter-jdbc'
        // mybatis
        implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
        // mysql
        runtimeOnly 'com.mysql:mysql-connector-j'

        // aop
        implementation("org.springframework.boot:spring-boot-starter-aop")
    }
}
project(':core') {
    bootJar { enabled = false } // common, core 은 bootJar 로 패키징 할 필요 없음
    jar { enabled = true }
}

project(':eureka-server') {
    bootJar { enabled = true }
    jar { enabled = true }

    dependencies {
        // spring security
        implementation 'org.springframework.boot:spring-boot-starter-security'
        testImplementation 'org.springframework.security:spring-security-test'

        // eureka server
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
    }
}

project(':api-gateway') {
    bootJar { enabled = true }
    jar { enabled = true }

    dependencies {
        // spring cloud gateway
        implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
        // eureka client
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    }
}

def allProjects() {
    return subprojects.findAll{
        /*(it.name != 'eureka-server' && it.name != 'api-gateway' && it.name != 'backoffice-nuxt' && it.name != 'common' && it.name != 'core')*/
        (it.name != 'eureka-server' && it.name != 'api-gateway' && it.name != 'backoffice-nuxt' && it.name != 'core')
        /*(it.name != 'eureka-server' && it.name != 'api-gateway' && it.name != 'backoffice-nuxt')*/
    }
}
//println subprojects.name // api-gateway, auth-api, backoffice, backoffice-nuxt, common, core, eureka-server, product-api, system-api
//println allProjects();

configure(allProjects()) {
    dependencies {
        // eureka client
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        // web
        implementation 'org.springframework.boot:spring-boot-starter-web'
        // spring session + redis
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'
        implementation 'org.springframework.session:spring-session-data-redis'
    }
}

configure(subprojects.findAll{ it.name.endsWith('-api') }) {
    bootJar { enabled = true }
    jar { enabled = true }

    dependencies {
        implementation project(':core')
        implementation project(':common')

        // devtools
        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        // openfeign
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    }
}

configure(subprojects.findAll{ it.name.endsWith('office') }) {
    bootJar { enabled = true }
    jar { enabled = true }

    dependencies {
        implementation project(':core')
        implementation project(':common')

        // thymeleaf
        implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    }
}